#!/usr/bin/env perl

=head1 NAME

mojowka

=head1 DESCRIPTION

mojowka - is a L<Mojolicious::Lite> based lightweight wiki.

=head1 AUTHOR

Alexander Sapozhnikov
L<http://shoorick.ru/>
L<< E<lt>shoorick@cpan.orgE<gt> >>
2000-2015

=head1 LICENSE

This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

use utf8;
use Mojolicious::Lite;
use Locale::TextDomain qw( mojowka locale );
no warnings 'redefine';

use DBI;
use File::Basename 'basename';
use File::Path     'mkpath';
use Mojo::ByteStream 'b';
use Mojo::Log;
use Text::Textile;


our $VERSION=0.05;

my $log = Mojo::Log->new;

my $dbfile
    = $ENV{'MOJOWKA_DATAFILE'}
    || 'data.sqlite';

#our $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", undef, undef);
our $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", undef, undef, {sqlite_unicode => 1});

our $txt = Text::Textile->new;
    $txt->charset('utf-8');

# Image base URL
our $IMAGE_BASE
    = $ENV{'MOJOWKA_IMAGE_BASE'}
    || '/images';

# Directory to save image files
# http://d.hatena.ne.jp/yukikimoto/20100212/1265989676
my $IMAGE_DIR  = ${app->static->paths}[0] . $IMAGE_BASE;
unless (-d $IMAGE_DIR) {
    mkpath $IMAGE_DIR or die "Cannot create directory: $IMAGE_DIR";
}

# i18n
plugin 'charset' => { 'charset' => 'utf-8' };
plugin 'textdomain' => {
    'domain'      => 'mojowka',
    'search_dirs' => [ 'locale' ],
    'available_languages' => [ 'en', 'ru' ],
    'default_language'    => 'en',
};

app->hook( 'before_routes' => sub {
    my $self = shift;
    $self->set_language( $self->session( 'language' ) || $self->detect_language );
});



# Routes

# any '/' => sub { shift->redirect_to( '/index' ) };

# For security reasons User can login only via POST
get  '/login' => 'login';
post '/login' => sub {
    my $self  = shift;
    my $login    = $self->param('login')    || '';

    my $password = $self->param('password') || '';
       $password = b($password)->md5_sum;

    my $redirect
        = $self->param('redirect')
#        || $self->req->env('HTTP_REFERER')
        || '/';

    if ( $login ) {

        my $row = $dbh->selectrow_hashref(
            q{SELECT id FROM user WHERE login=? AND password=?},
            {},
            $login, $password
        );

        if ( $row ) {
            $self->session( 'login' => $login );
            $self->flash( 'message' => __ 'Thanks for logging in' );
        }
        else {
            $self->flash( 'message' => __ 'Wrong username or password' );
            $redirect = '/login';
        }
    }
    else {
          $redirect = '/login';
    } # else

    $self->redirect_to( $redirect );
};

get '/logout' => sub {
    my $self = shift;
    $self->session( 'expires' => 1 );
    my $redirect = $self->param('redirect') || '/';
    $self->redirect_to( $redirect );
}; # => 'logout';

get '/set_language'           => \&set_language;
get '/set_language/:language' => \&set_language;


post '/preview' => sub {
    my $self = shift;
    my $text = $self->param('article') || return;
    $self->render( 'text' => markup( $text ) );
};

get '/sitemap' => sub {
    my $self = shift;

    my $rows = $dbh->selectcol_arrayref(
        q{SELECT title FROM page ORDER BY LOWER(title)},
    );

    return undef unless $rows;

    foreach my $row ( @$rows ) {
        $row = b( $row )->decode('UTF-8')->to_string;
    }

    return $self->render(
        'rows'             => $rows,
    );
};

get '/tags' => sub {
    my $self = shift;

    my $rows = $dbh->selectcol_arrayref(
        q{SELECT title FROM tag ORDER BY LOWER(title)},
    );

    return undef unless $rows;

    foreach my $row ( @$rows ) {
        $row = b( $row )->decode('UTF-8')->to_string;
    }

    return $self->render(
        'rows'     => $rows,
    );
};

get '/tags/:tag' => sub {
    my $self = shift;
    my $tag  = $self->param('tag');

    my $rows = $dbh->selectall_arrayref(
        q{
            SELECT filename,image.text
            FROM image
            LEFT JOIN image_tag
                ON image_tag.image=image.id
            LEFT JOIN tag
                ON image_tag.tag=tag.id
            WHERE LOWER(tag.title)=LOWER(?)
        },
        { Slice => {} },
        $tag, 
    );

    return $self->render(
        'tag'       => $tag,
        'base'      => $IMAGE_BASE,
        'rows'      => $rows,
    );
};

get '/search/:query' => \&search;
get '/search'        => \&search;

# Authentication
under sub {
    my $self = shift;

    # Authenticated
    return 1
        if $self->session( 'login' );

    # Not authenticated
    $self->flash( 'message' => __ 'You are not logged in' );
    $self->render(
        'status'   => 401,
    );
    return;
};

any '/edit/:id'   => [ id => qr/\d+/ ] => \&edit_article;
any '/edit/:id'   => [ id => 'new'   ] => \&edit_article;
any '/create/(*title)'                 => \&edit_article;

post '/images/(*title)'                => \&upload_image;

any '/delete/:id' => [ id => qr/\d+/ ] => \&delete_article;

get '/userlist'       => \&get_userlist;

# Change password
get  '/change_password/:id' => [ id => qr/\d+/ ] => 'change_password';
get  '/change_password'     =>  'change_password';
post '/change_password'     => \&change_password;

# Other requests
under sub { 1 };

get '/images/(*title)' => 'imagestitle';

get '/profile/:login' => \&get_user;
get '/(*title)'       => \&get_article;
get '/'               => \&get_article;

app->types->type( 'html' => 'text/html; charset=utf-8' );
app->secrets([ 'mojoWka' ]);

app->start( @ARGV ? @ARGV : 'daemon' );

END { my $rc = $dbh->disconnect }


=head1 FUNCTIONS

=head2 markup

Convert lightweight markup into HTML

=cut

sub markup {
    local $_ = shift || return;

    # [[internal links]]
    s{
        \[\[
            (([^\]\|]+)\|)?
             ([^\]\|]+)
        \]\]
    }{
        my $link  = $2 || $3;
           $link  =~ tr/ /_/;
        my $text  = $3;
        sprintf q{"%s":/%s}, $text, $link;
    }gex;

#    $log->debug("Textiling of $_");
    return $txt->process( $_ );

} # sub markup


=head2 get_article

Get article by title

=cut

sub get_article {
    my $self  = shift;
    my $title = $self->param('title') || '';
    $title =~  s/\.html$//;
    $title =~ tr/_/ /;

    my $row = $dbh->selectrow_hashref(
        q{SELECT * FROM page WHERE LOWER(title)=LOWER(?)},
        {},
        $title,
    );

    return $self->render(
        'template' => 'not_found',
        'status'   => 404,
    ) unless $row;

    $self->render(
        'text'   => markup( $row->{'text'} ),
        'title'  => $title,
        'layout' => 'default',
        'id'     => $row->{'id'},
    );

} # sub get_article


=head2 edit_article

Draw editing form for article found by its ID
and process this form.

=cut

sub edit_article {
    my $self = shift;
    my $id   = $self->param('id') || 0; # zero, natural number or word 'new'. See above
       $id   = 0 if $id eq 'new';       # digits only

    my $article_title   = $self->param('title') || '';
       $article_title   =~  s/\.html$//;
       $article_title   =~ tr/_/ /;

    my $article_content = $self->param('article');

    if ( $self->req->method eq 'POST' ) {

        # Validate
        my @errors = ();

        TRY: {
            # is title non-unique?
            if (
                $dbh->selectrow_hashref(
                    q{SELECT id FROM page WHERE LOWER(title)=LOWER(?) AND id!=?},
                    {},
                    $article_title, $id,
                )
            ) {
                push ( @errors, __ 'Title must be unique' );
                last TRY;
            } # if

            # is content empty?
            unless ( $article_content ) {
                push ( @errors, __ 'Page content can not be empty' );
                last TRY;
            }

        } # TRY

        if ( @errors ) {
            return $self->render(
                'errors'            => [ @errors ],
                'template'          => 'edit_article',
                'title'             => b( __ 'Errors occured' )->decode( 'UTF-8' ),
                'id'                => $id,
                'article_content'   => $article_content,
                'article_title'     => b( $article_title )->decode( 'UTF-8' ),
            );
        } # if errors
        # else OK

        my $rows_affected = 0;
        if ( $id ) { # edit
            $rows_affected = $dbh->do(
                q{UPDATE page SET title=?, text=? WHERE id=?},
                {},
                $article_title, $article_content, $id
            )
        } # if exists
        else { # new page
            $rows_affected = $dbh->do(
                q{INSERT INTO page VALUES(NULL, ?, ?)},
                {},
                $article_title, $article_content,
            )
        } # else new

        if ( $rows_affected ) {
            $article_title =~ tr/ /_/;
            $self->flash( 'message' => __ 'Changes was saved' );
            $self->redirect_to( "/$article_title" );
        }
        # else NOT saved

        push ( @errors, __ 'Can not save' );

        return $self->render(
            'errors'            => [ @errors ],
            'template'          => 'edit_article',
            'title'             => b( __ 'Errors occured' )->decode( 'UTF-8' ),
            'id'                => $id,
            'article_content'   => $article_content,
            'article_title'     => b( $article_title )->decode( 'UTF-8' ),
        );

    } # if POST

    if ( $id ) { # existing record
        my $row = $dbh->selectrow_hashref(q{SELECT * FROM page WHERE id=?}, {}, $id);

        if ( $row ) {
            my $article_title = b( $row->{'title'} )->decode( 'UTF-8' );
            return $self->render(
                'template'          => 'edit_article',
                'title'             => b( __ 'Editing' )->decode( 'UTF-8' ),
                'id'                => $id,
                'article_content'   => b( $row->{'text'} )->decode( 'UTF-8' ),
                'article_title'     => $article_title,
                'old_title'         => $article_title,
            );
        } # if $row
    } # if $id
    else { # new record
        $article_title =~ tr/_/ /;
        return $self->render(
            'template'          => 'edit_article',
            'title'             => b( __ 'New page' )->decode( 'UTF-8' ),
            'id'                => 0,
            'article_content'   => '',
            'article_title'     => b( $article_title )->decode( 'UTF-8' ),
        );
    } # else
} # sub edit_article


=head2 delete_article

Delete article specified by ID

=cut

sub delete_article {
    my $self = shift;
    my $id   = $self->param('id') || return; # natural number only

    my $rows_affected = $dbh->do(
        q{DELETE FROM page WHERE id=?},
        {},
        $id,
    );

    if ( $rows_affected == 1 ) { # deleted without errors
        $self->flash( 'message' => __ 'Page was deleted' );
        $self->redirect_to( '/' );
    } # if deleted
} # sub delete_article

=head2 get_user

Get user's profile

=cut

sub get_user {
    my $self = shift;
    my $login   = $self->param('login') || return;

    my $row = $dbh->selectrow_hashref(
        q{SELECT text FROM user WHERE login=?},
        {},
        $login,
    );

    return $self->render_text(
        markup( b( $row->{'text'} )->decode('UTF-8')->to_string ),
        'title'  => $login,
        'layout' => 'default',
    ) if $row;

} # sub get_user

=head2 get_userlist

Get list of registered users

=cut

sub get_userlist {
    my $self  = shift;
    my $login = $self->session( 'login' );

    my $row = $dbh->selectrow_hashref(
        q{SELECT 1 FROM user WHERE login=? AND is_admin=1},
        {},
        $login,
    );

    if ($row) {
        my $rows = $dbh->selectall_arrayref(
            q{SELECT login FROM user},
            { Slice => {} },
        );
        return $self->render(
            'rows'     => $rows,
            'layout'   => 'default',
            'template' => 'userlist',
        ) 
    }
    # else
    $self->flash( 'message' => __ 'Permission denied' );
    $self->redirect_to( '/login' );
} # sub get_userlist

=head2 search

Search pages by title and content

=cut

sub search {
    my $self = shift;

    my $title = __ 'Search';
    my $query = $self->param('query') || '';
    my $rows  = [];

    if ( $query ) {
        my $row = $dbh->selectcol_arrayref(
            q{SELECT title FROM page WHERE LOWER(title)=LOWER(?)},
            {},
            $query,
        );
        if ( @$row ) {
            $self->flash( 'message' => __ 'Exact matching found' );
            $query = b( shift @$row )->decode('UTF-8')->to_string;
            $query =~ tr/ /_/;
            $self->redirect_to( "/$query" );
            return;
        } # if row

        $rows = $dbh->selectcol_arrayref(
            q{SELECT title FROM page WHERE LOWER(title) LIKE LOWER(?) OR LOWER(text) LIKE LOWER(?) ORDER BY LOWER(title)},
            {},
            "%$query%", "%$query%",
        );

        $title = __nx
            'Found {count} page',
            'Found {count} pages',
            scalar @$rows,
            'count' => scalar @$rows;

        foreach my $row ( @$rows ) {
            $row = b( $row )->decode('UTF-8');
        }

    } # if query

    return $self->render(
        'template'         => 'search',
        'query'            => $query,
        'rows'             => $rows,
        'title'            => b( $title )->decode('UTF-8'),
    );
} # sub search


=head2 change_password

Change password of specified user

=cut

sub change_password {
    my $self = shift;
    my $login = $self->session( 'login' );
    my $redirect = '/change_password'; # Default redirect - to form

    my $old_password        = $self->param( 'old_password' )        || '';
    my $new_password        = $self->param( 'new_password' )        || '';
    my $repeat_new_password = $self->param( 'repeat_new_password' ) || '';

    if ( $new_password ne $repeat_new_password ) {
        $self->flash( 'message' => __ 'Passwords does not match' );
        $self->redirect_to( $redirect );
        return;
    }

    # else
    # Check old password
    my $row = $dbh->selectrow_hashref(
        q{SELECT id FROM user WHERE login=? AND password=?},
        {},
        $login, b($old_password)->md5_sum
    );

    # Wrong old password
    unless ( $row ) {
        $self->flash( 'message' => __ 'Wrong old password' );
        $self->redirect_to( $redirect );
        return;
    }

    my $rows_affected = $dbh->do(
        q{UPDATE user SET password=? WHERE id=?},
        {},
        b($new_password)->md5_sum, $row->{'id'},
    );
    
    if ( $rows_affected ) {
        $self->flash( 'message' => __ 'Password was changed' );
        $redirect = "/profile/$login";
    }
    else {
        $self->flash( 'message' => __ 'Can not change password' );
    }

    $self->redirect_to( $redirect );

} # sub change_password


=head2 upload_image

Upload image file.
See L<http://d.hatena.ne.jp/yukikimoto/20100212/1265989676> for more details. 

=cut

sub upload_image {
    my $self  = shift;
    my $title = $self->param('title') || time;
       $title =~ s/\.\w{3,4}$//i; # Trim extension when presented. Images have 3 or 4 letter extension

    my $image = $self->req->upload('file');
    
    # Nothing uploaded
    return $self->render(
        'template' => 'error',
        'title'    => b( __ 'Upload failed' )->decode( 'UTF-8' ),
        'errors'   => [ __ 'File is not specified.' ],
    )
        unless $image;
    
    # Skip oversized
    return $self->render(
        'template' => 'error',
        'title'    => b( __ 'Upload failed' )->decode( 'UTF-8' ),
        'errors'   => [ __ 'Image size is too large.' ],
    )
        if $ENV{'MOJO_MAX_MESSAGE_SIZE'}
        && $ENV{'MOJO_MAX_MESSAGE_SIZE'} < $image->size;
    
    
    # Check file type
    my %exts = ( 'image/gif' => 'gif', 'image/jpeg' => 'jpg', 'image/png' => 'png' );
    my $image_type  = $image->headers->content_type;
    
    # Extention
    my $ext = $exts{$image_type}
        or
        # Content type is wrong
        return $self->render(
            template => 'error',
            message  => __ 'Upload failed. Content type is wrong.'
        );
    
    # Image file
    my $image_file = "$IMAGE_DIR/$title.$ext";
    
    # If file is exists, Retry creating filename
    my $i = 0;
    $image_file = "$IMAGE_DIR/$title." . $i++ . ".$ext"
        while -f $image_file;

    my $image_link = substr( $image_file, length $IMAGE_DIR );

    # Save to file
    $image->move_to($image_file);
    
    $dbh->do(
        q{INSERT INTO image (filename) VALUES(?)},
        {},
        $image_link,
    );

    $self->render(
        'title'    => b( __ 'Image uploaded' )->decode( 'UTF-8' ),
        'base'     => $IMAGE_BASE,
        'link'     => $image_link,
        'template' => 'upload_image',
    );
    
} # sub upload_image


=head2  set_language

Set preferred language.
Called as set_language/I<ln> or as set_language?language=I<ln>, where I<ln> is language code.
In version 0.0.3 available 2 languages: English and Russian.

=cut

sub set_language {
    my $self = shift;
    $self->session( 'language' => $self->param( 'language' ) );
    $self->redirect_to( $self->req->headers->referrer || '/' );
} # sub set_language

__DATA__

@@ title.html.ep
% layout 'default';
%= $text


@@ userlist.html.ep
% layout 'default', 'title' => __ 'User list';
<ul>
% foreach my $row (@$rows) {
    <li><a href="<%= url_for "/profile/$row->{'login'}" %>"><%= $row->{'login'} %></a></li>
% }
</ul>

@@ login.html.ep
% layout 'default';
% stash 'title' => __ 'Login';
<form method="post" action="<%= url_for '/login' %>">
<dl>
<dt><%= __ 'Username' %></dt><dd><input type="text" name="login"></dd>
<dt><%= __ 'Password' %></dt><dd><input type="password" name="password"></dd>
</dl>
<input type="submit" value="<%= __ 'Login' %>">
</form>
%# } # else


@@ change_password.html.ep
% layout 'default';
%= include 'jquery';
<script type="text/javascript">
    function compare_passwords(){
        if ( $('#new_password').val() == $('#repeat_new_password').val() ) {
            $('#matching').html( '' );
            return true;
        }
        $('#matching').html('<%= __ 'Passwords does not match' %>');
        return false;
    }

    $(document).ready(function() {

        // Check strength and matching
        $('#new_password').change(function() {
            compare_passwords();
            // Strong password must be at least 8 characters long
            // and must contain letters in other cases, digits and punctuation signs
            var np = $('#new_password').val();
            var strength = '<%= __ 'Strong password' %>';

            if ( np.length == 0 ) {
                strength = '<%= __ 'Empty password' %>';
            }
            else if ( np.length < 8 ) {
                strength = '<%= __ 'Too short password' %>';
            }
            else if ( np == '<%= session 'login' %>' ) {
                strength = '<%= __ 'Password and login are equal' %>';
            }
            else if ( ! np.match(/\d/)  ) {
                strength = '<%= __ 'Missing digits' %>';
            }
            else if ( ! np.match(/[a-z]/)  ) {
                strength = '<%= __ 'Missing small letters' %>';
            }
            else if ( ! np.match(/[A-Z]/)  ) {
                strength = '<%= __ 'Missing capital letters' %>';
            }
            $('#strength').html( strength );
        });

        // Only check matching when change last field
        $('#repeat_new_password').change(function() {
            compare_passwords();
        });

        // Prevent sending wrong data
        $('#password_form').submit(function() {
            return compare_passwords();
        });
    });
</script>
% stash 'title' => __ 'Change password';
<form method="post" id="password_form">
<dl>
<dt><%= __ 'Old Password' %></dt><dd><input type="password" name="old_password"></dd>
<dt><%= __ 'New Password' %></dt><dd><input type="password" name="new_password" id="new_password">
<em class="tip" id="strength"></em></dd>
<dt><%= __ 'Repeat new password' %></dt><dd><input type="password" name="repeat_new_password" id="repeat_new_password">
<em class="tip" id="matching"></em></dd>
</dl>
<input type="submit" value="<%= __ 'Change' %>">
</form>
%# } # else


@@ sitemap.html.ep
% layout 'default', 'title' => __ 'Sitemap';
<ul>
% for my $row ( @$rows ) {
%   my $link = $row;
%   $link =~ tr/ /_/;
%   $row  ||= __ 'Main page';
    <li><a href="<%= url_for "/$link" %>"><%= $row %></a></li>
% }
</ul>
<h2><%= __ 'Special pages' %></h2>
<ul>
<li><a href="<%= url_for '/search'  %>"><%= __ 'Search' %></a></li>
<li><a href="<%= url_for '/sitemap' %>"><%= __ 'Sitemap' %></a></li>
<li><a href="<%= url_for '/login'   %>"><%= __ 'Login' %></a></li>
</ul>


@@ tags.html.ep
% layout 'default', 'title' => __ 'Tags';
<ul>
% for my $row ( @$rows ) {
%   my $link = $row;
%   $link =~ tr/ /_/;
    <li><a href="<%= url_for "/tags/$link" %>"><%= $row %></a></li>
% }
</ul>


@@ tagstag.html.ep
% layout 'default', 'title' => __x '{tag} tagged images', 'tag' => $tag;
<ul class="gallery">
% for my $row ( @$rows ) {
    <li><a href="<%= url_for( $base . '/' . $row->{'filename'} ) %>"><img src="<%= url_for ( $base . '/tn/' . $row->{'filename'} ) %>" alt="<%= $row->{'text'}%>"></a></li>
% }
</ul>


@@ search.html.ep
% layout 'default';
<form action="<%= url_for '/search' %>">
<input type="text" name="query" value="<%= $query %>">
<input type="submit" value="<%= __ 'Find' %>">
</dl>
</form>
<ol>
% for my $row ( @$rows ) {
%   my $link = $row;
%   $link =~ tr/ /_/;
%   $row  ||= __ 'Main page';
    <li><a href="<%= url_for "/$link" %>"><%= $row %></a></li>
% }
</ol>


@@ upload_image.html.ep
% layout 'default';
%# my $base = param 'base';
<p><%= __x 'Image uploaded and saved as {link}', 'link' => url_for $link %>
<br><img src="<%= url_for "$base/$link" %>" alt="<%= __ 'Just uploaded' %>"></p>
<p><%= __ 'You can insert this image to pages with following code:' %></p>
<blockquote><code>!<%= url_for "$base/$link" %>!</code></blockquote>


@@ not_found.html.ep
% layout 'error';
% stash 'title' => __ 'Not Found - ERROR 404';
<h1><%= __ 'Not found' %></h1><p><%= __ 'Document you requested was not found.' %></p>
<ul>
% my $article_title = param 'title';
<li><a href="<%= url_for "/search/$article_title" %>"><%== __x  'Search for &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
% if ( session 'login' ) {
<li><a href="<%= url_for "/create/$article_title" %>"><%== __x 'Create page &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
% }
</ul>


@@ imagestitle.html.ep
% layout 'error';
% stash 'title' => 'Not Found - ERROR 404';
<h1><%= __ 'Not found' %></h1><p><%= __ 'Image you requested was not found.' %></p>
<ul>
% my $article_title = param 'title';
% my $base          = param 'base';
<li><a href="<%= url_for "/search/$article_title" %>"><%== __x  'Search for &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
% if ( session 'login' ) {
<li><form action="<%= url_for "$base/$article_title" %>" method="post" enctype ="multipart/form-data"><%= __ 'Choose an image' %>
<input type="file" name="file"> <%= __ 'and' %>
<input type="submit" value="<%= __ 'Upload' %>"></form></li>
% }
</ul>


@@ edit_article.html.ep
% layout 'default';
% use Mojo::ByteStream 'b';
%= include 'jquery';
<script type="text/javascript" src="<%= url_for '/jquery-ui-1.8.11.custom.min.js' %>"></script>
<script type="text/javascript" src="<%= url_for '/jquery.caret.1.02.min.js' %>"></script>
<script type="text/javascript">
function wrap(prefix, suffix) {
    with ( $('#article') ) {
        var inner = caret().text;
        var start = caret().start;
        var end   = caret().end;
        val( caret().replace( prefix + inner + suffix ) );
        caret({ start: start+prefix.length, end:end+prefix.length });
    }
    return false;
}

$(document).ready(function() {

    // Tie onclick action to all .ajax links
    $('a#preview_link').click(function() {
        $.ajax({
            url:        '<%= url_for '/preview' %>',
            type:       'post',
            data:       { article: $('#article').val() },
            dataType:   'html',
            success:    function(data, textStatus) {
                $('div#preview_area').html(data);
                $('div#preview_area').show();
            },
            error:      function() {
                alert('Can not preview');
            }
        });
        return false;
    });
    $('#article').resizable({
        handles: 's'
    });

    $('#btn_bold').click(function(){ wrap('*', '*') });
    $('#btn_italic').click(function(){ wrap('_', '_') });
    $('#btn_h1').click(function(){ wrap('\n\nh1. ', '\n\n') });
    $('#btn_h2').click(function(){ wrap('\n\nh2. ', '\n\n') });
    $('#btn_h3').click(function(){ wrap('\n\nh3. ', '\n\n') });
    $('#btn_ul').click(function(){ wrap('\n\n* ', '\n\n') });
    $('#btn_ol').click(function(){ wrap('\n\n# ', '\n\n') });
    $('#article').keypress(function(e){
        switch (e.which) {
            case 2: wrap('*', '*'); break;
            case 9: wrap('_', '_'); break;
        }
    });
});
</script>
<style type="text/css">
.ui-resizable { position: relative}
.ui-resizable-handle { position: absolute;font-size: 0.1px;z-index: 99999; display: block;}
.ui-resizable-disabled .ui-resizable-handle, .ui-resizable-autohide .ui-resizable-handle { display: none; }
.ui-resizable-s { cursor: s-resize; height: 20px; width: 100%; bottom: 11px; left: 0;background:url(<%= url_for '/grip.gif' %>) no-repeat right top;margin:0 -4px }
#toolbar a { margin: 0 2px; padding: 0 0.3em; border: 1px outset #999; text-decoration:none; color: #000 }
button { background:url(<%= url_for '/toolbar.gif' %>) no-repeat 0 50%;width:22px;height:22px;text-indent:-9999em;border:1px outset #999;-moz-border-radius:2px;border-radius:3px}
button:hover{border-color:#69c}
#btn_italic { background-position:  -20px 50% }
#btn_h1 { background-position:  -40px 50% }
#btn_h2 { background-position:  -60px 50% }
#btn_h3 { background-position:  -80px 50% }
#btn_ul { background-position: -100px 50% }
#btn_ol { background-position: -120px 50% }
</style>

% if ( my $errors = stash 'errors' ) {
    <ul id="errors">
%   for my $error ( @$errors ) {
        <li><%= b( $error )->decode('UTF-8')->to_string %></li>
%   }
    </ul>
% } # if

<form method="post" action="<%= url_for "/edit/$id" %>">
<dl>
<dt><%= __ 'Title' %></dt>
<dd><input type="text" name="title" value="<%= $article_title %>"></dd>
<dt><%= __ 'Content' %></dt>
<dd><span id="toolbar">
<button type="button" id="btn_bold" title="<%= __ 'Bold (Ctrl+B)' %>"><%= __ 'Bold' %></button>
<button type="button" id="btn_italic" title="<%= __ 'Italic (Ctrl+I)' %>"><%= __ 'Italic' %></button>
<button type="button" id="btn_h1" title="<%= __ 'Header 1' %>"><%= __ 'Header 1' %></button>
<button type="button" id="btn_h2" title="<%= __ 'Header 2' %>"><%= __ 'Header 2' %></button>
<button type="button" id="btn_h3" title="<%= __ 'Header 3' %>"><%= __ 'Header 3' %></button>
<button type="button" id="btn_ul" title="<%= __ 'Unordered list item' %>"><%= __ 'Unordered list item' %></button>
<button type="button" id="btn_ol" title="<%= __ 'Ordered list item' %>"><%= __ 'Ordered list item' %></button>
</span>
<br><textarea name="article" id="article"><%= $article_content %></textarea>
<br><a href="http://search.cpan.org/perldoc?Text::Textile#SYNTAX"><%= __ 'textile syntax' %></a>
</dd>
</dl>
<input type="submit" value="<%= __ 'Save' %>">
<a href="#" id="preview_link"><%= __ 'Preview' %></a>
% if ( my $old_title = stash 'old_title' ) {
    <a href="<%= url_for "/$old_title" %>"><%= __ 'Cancel' %></a>
% }
% if ( $id ) {
    <a href="<%= url_for "/delete/$id" %>" id="delete_link"
    onclick="return confirm('<%= __ 'Do you really want to delete this page?' %>')"><%= __ 'Delete page' %></a>
% }
</form>
<div id="preview_area"></div>


@@ layouts/error.html.ep
<!DOCTYPE html>
<html>
    <head>
        <title><%= $title || __ 'ERROR' %></title>
        <style type="text/css">body{background:#fec;color:#000}h1{color:#900}</style>
    </head>
    <body>
%= include 'menu';
        <%= content %>
    </body>
</html>


@@ layouts/default.html.ep
% use Mojo::ByteStream 'b';
<!DOCTYPE html>
<html>
    <head><title><%= $title || __ 'Welcome'%></title>
    <link rel="shortcut icon" href="<%= url_for '/favicon.ico' %>">
%# Maybe You can replace next line
%# with <link rel="stylesheet" type="text/css" link="style.css">
%# when you can inflate files. I can't :-(
    <style type="text/css"><%= include 'style.css' %></style>
    </head>
    <body>
%= include 'menu';
% if ( my $message = flash 'message' ) {
        <div id="message"><%= b( $message )->decode('UTF-8')->to_string %></div>
% }

% if ( my $login = session 'login' ) {
        <ul id="logged">
            <li><%= __ 'Logged as' %> <a
                href="<%= url_for "/profile/$login" %>"><%= $login %></a></li>
            <li><a href="<%= url_for '/change_password' %>"><%= __ 'Change password' %></a></li>
            <li><a href="<%= url_for '/logout' %>"><%= __ 'Logout' %></a></li>
%            if ( my $id = stash 'id' ) {
                <li><a href="<%= url_for "/edit/$id" %>"><%= __ 'Edit this page' %></a></li>
%            }
        </ul>
% }
    <h1><%= $title %></h1>
    <%= content %>
    </body>
</html>

@@ jquery.html.ep
<%= javascript 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' %>
<%= javascript begin %>
    if (typeof jQuery == 'undefined') {
      var e = document.createElement('script');
      e.src = '/js/jquery.js';
      e.type = 'text/javascript';
      document.getElementsByTagName("head")[0].appendChild(e);
    }
<% end %>

@@ menu.html.ep
<ul id="menu"><li><a href="<%= url_for '/' %>"><%= __ 'Main page' %></a></li><li><a
    href="<%= url_for '/sitemap' %>"><%= __ 'Sitemap' %></a></li><li><form
    action="<%= url_for '/set_language' %>" onchange="this.submit()"><select name="language"><option value=""><%= __ 'Language' %></option><option value="en">English</option><option value="ru">Русский</option></select></form></li><li><form
    action="<%= url_for '/search' %>"><input type="text" name="query"></form></li></ul>

@@ style.css.html.ep
body {
    background: #fff;
    color:      #000;
}

h1, h2, h3, h4, h5, h6 {
    font-family: sans-serif;
}

@media screen {
    body {
        margin:     0;
        padding:    1em;
    }

    h1 {
        color:      #223;
        font-size:  140%;
    }

    h2 {
        color:      #335;
        font-size:  120%;
    }

    h3 {
        color:      #446;
        font-size:  100%;
    }

    #message {
        border:     1px solid #fc0;
        background: #fec;
        padding:    1em;
    }

    #logged {
        float:      right;
        display:    inline;
        margin:     0;
    }

    #menu {
        list-style: none;
        margin:     -1.25em -1.25em 1em;
        padding:    0;
        height:     2em;
        font-size:  80%;
        background-color: #e0e7ee;
    }

    #menu li {
        display:    inline;
        padding:    0;
    }

    #menu a {
        padding:    0.3em 1em 0;
        height:     1.7em;
        display:    block;
        float:      left;
    }

    #menu a:hover {
        background-color: #8ab;
        color:      #000;
        text-decoration:        none;
    }

    #menu form {
        display:    inline;
        float:      right;
    }

    #menu input {
        background: #fff url(<%= url_for '/bg-search.png' %>) no-repeat 100% 50%;
        color: #333;
        font-family: 'DejaVu Sans Mono','Liberation Mono',monospaced;
    }

}

#logged li {
    display:    inline;
    background: #eee;
    border:     1px solid #ccc;
    padding:    0.1em 0.5em;
}

#errors {
    background: #fdc;
    border:     1px solid #c00;
}

dd textarea {
    width:  100%;
    height: 7em;
}

#preview_area {
    border: 1px solid #900;
    margin-top: 1em;
    padding: 1em;
    background: #eee;
    display: none;
}

#preview_link {
    color:      #656;
    text-decoration: none;
    border-bottom: 1px dashed #878;
}

#delete_link {
    color:      #900;
    float:      right;
}

@media print {
    body {
        font-family: serif;
    }

    #logged, #message, #menu {
        display: none;
    }
}


